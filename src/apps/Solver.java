package apps;

import game.SampleSpecs;
import game.TestingSet;
import game.TrainingSet;
import data.DataSet;
import data.Exporter;
import data.PredictionStats;
import data.Solution;

import java.util.*;

import utils.ListUtils;
import utils.Multitasker;

/** 
 *  Uses specified datasets to predict on a training or test set 
 *  
 *  Loads only one dataset into memory at a time to keep memory usage reasonable (an issue prior to PartialTables)
 *  
 * */
public class Solver 
{
	private int delta;
	private List<Solution> solutionSet = new ArrayList<>();
	private List<DataSet> datasets = new ArrayList<>();
	private Map<Solution, TrainingSet> trainingMap = new HashMap<>();
	//Lists of prediction stats hashed by dataset bit size
	private Map<Integer, List<PredictionStats>> uncombinedLists = new TreeMap<>();
	private static final int NUM_THREADS = 5;
	
	public static void main(String[] args)
	{
		//new Solver(1).trainSet();
		
		for(int a = 1; a < 6; a++)
		{
			new Solver(a).testSet();
		}
		
	}
	public Solver(int delta)
	{
		this.delta = delta;
		
		switch(delta)
		{
			/** Displays final results broken down by dataset per delta. The array consists of percentile markers of the confidence per sampling group*/
			case 1:
			{
				/*
Finished 25
For 25 bit collections:
Correct: 120 [137.56242338577255, 159.92610690893076, 172.40285531998023, 185.13606382269649, 195.11880917945822, 206.90885482412168, 213.32646280858702, 223.14604005674911, 231.94963458206982, 246.1893059723689]
Incorrect: 36 [144.90289874095805, 165.66948251216394, 174.67949372384555, 183.39168006542576, 187.6989826266767, 192.3618314647418, 198.02980507240008, 208.27112744480718, 213.150477207249, 229.09356987011333, 238.40664200191114, 264.7227215155252]

For 36 bit collections:
Correct: 2294 [32.32169869075028, 75.91589466720339, 97.23517473707335, 115.09290922135759, 131.6146050859124, 147.54881479099026, 163.0729305059333, 181.45160163189882, 202.50017489738778, 231.55261624335523, 314.13428729119545]
Incorrect: 672 [33.5834123422678, 78.8693174308734, 97.92599818070408, 116.49092842961403, 133.77905479627077, 149.60931161141892, 165.55734409646837, 183.3903225491484, 196.70622491058583, 224.34145828585588, 323.9415424912748]

For 49 bit collections:
Correct: 20598 [26.029054679724982, 71.48969742530778, 113.40111363197073, 161.24221792848218, 217.55121353738525, 276.27250343641543, 331.2245607345334, 385.489632420475, 437.502333415119, 500.75784821052684, 734.467638941344]
Incorrect: 4031 [26.103060899562756, 57.337903927445495, 87.22997795931437, 123.75908529419529, 168.85008452292152, 226.23316746293267, 282.08214115375785, 341.67963692537563, 403.97370095167867, 475.91284674917995, 713.9198788516676]

For 64 bit collections:
Correct: 31423 [148.1126866015566, 284.53619503276076, 338.9767548524618, 393.449227408447, 454.36498817386206, 519.8988437409371, 589.7276414373043, 667.2439427012018, 754.1494547079092, 862.0979586526371, 1204.55544765002]
Incorrect: 3199 [148.35780372365716, 274.97482150915476, 318.53930386726347, 360.29312139827425, 401.9743537294678, 451.96426153831084, 507.8701442741053, 570.2266375514473, 649.8204161244289, 761.937961351033, 1046.7103815070332]

For 100 bit collections:
Correct: 90732 [351.02525484358955, 519.6618523877262, 795.373441567133, 1085.5936112524298, 1301.5694197249688, 1376.4578589336545, 1381.551055796427, 1381.55115645171, 1381.5512536686297, 1381.5512557962272, 1381.5512557962272]
Incorrect: 1295 [351.1998903809981, 387.8839087963857, 425.15229199850233, 492.436154270801, 588.5799697067505, 745.9072577322956, 931.8213534961882, 1092.9320216169153, 1297.0545343448298, 1381.551055796427, 1381.5512557962272]

Total Error: 0.05979922279792746
				 */
				datasets = Arrays.asList(
						new DataSet(new SampleSpecs(5, 5, 5, 5, delta))
						,new DataSet(new SampleSpecs(6, 6, 6, 6, delta))
						,new DataSet(new SampleSpecs(7, 7, 7, 7, delta))
						,new DataSet(new SampleSpecs(8, 8, 8, 8, delta))
						,new DataSet(new SampleSpecs(10, 10, 10, 10, delta))
						);
				break;
			}
			case 2:
			{
/*
For 25 bit collections:
Correct: 190 [57.42808115726045, 125.93334108223146, 150.14106500864983, 159.81220245633924, 169.22213776237265, 177.75134680421124, 185.75038479866333, 191.83623364722274, 199.7483710003536, 216.0032510352476]
Incorrect: 94 [61.19384611375649, 125.76560474294851, 149.785899554989, 160.11804158724533, 167.9722429048314, 173.59984125763333, 184.78530889288834, 193.1205568421255, 199.63785421438246, 203.6431908579156, 216.96975954670046]

For 36 bit collections:
Correct: 5064 [95.00960373715644, 165.5911429726028, 206.47458541562258, 239.68640748388583, 271.23454854541603, 296.60026986707976, 321.35969841975907, 346.23681724117364, 371.1886999749169, 400.039195020226, 494.54125196997677]
Incorrect: 2427 [95.68186700344211, 163.05793510650733, 205.61336599636655, 237.18098133618798, 262.232741329882, 289.83988656595335, 315.9426497717438, 340.419898013927, 364.5696779961527, 393.5132241227109, 464.21042974318266]

For 49 bit collections:
Correct: 5515 [112.09794260983561, 153.8312326663405, 176.52647302539302, 198.73830848946494, 217.37184427217255, 235.37572587166036, 254.33019360912078, 274.62916373675455, 298.81693395951874, 329.9801680323984, 453.8920583396848]
Incorrect: 1939 [112.00518357008518, 148.1374906638278, 173.20092554864505, 192.3580820071748, 210.0945568784279, 227.67792036056215, 243.90345176430523, 262.18229786812617, 283.38031247562594, 315.03883776257766, 409.08720530006167]

For 64 bit collections:
Correct: 39931 [75.14795559695942, 169.04110778609072, 236.21795135380282, 316.985000312971, 402.1775636049977, 491.7309469466509, 579.3858321559783, 670.9122959114743, 764.1090972956483, 867.3910215034301, 1280.845074290356]
Incorrect: 9017 [75.2435211739096, 153.62514505042657, 201.4215906277973, 258.0997740909977, 328.10730627262694, 400.4254526001277, 488.48513758441914, 581.0791149292967, 675.3109752943653, 793.0270006522434, 1154.7731634680329]

For 100 bit collections:
Correct: 101165 [417.0086424137687, 565.3734533733452, 727.1310219978404, 916.2738658102875, 1142.645709984467, 1317.2896326206505, 1377.7362167839183, 1381.5510916544067, 1381.5511453417291, 1381.5511557963762, 1381.557733337593]
Incorrect: 3458 [417.54214151483427, 452.22624530197555, 489.4701251874344, 532.3313057750269, 583.3122589630351, 649.8884804721299, 732.2378765438481, 851.1888362696079, 1035.1845178398958, 1310.1598131142634, 1381.5511557963762]

Total Error: 0.10032582938388626
 */
				datasets = Arrays.asList(
						new DataSet(new SampleSpecs(5, 5, 5, 5, delta))
						,new DataSet(new SampleSpecs(6, 6, 6, 6, delta))
						,new DataSet(new SampleSpecs(7, 7, 7, 7, delta))
						,new DataSet(new SampleSpecs(8, 8, 8, 8, delta))
						,new DataSet(new SampleSpecs(10, 10, 10, 10, delta))
						);
				break;
			}
			case 3:
			{
				/*
For 25 bit collections:
Correct: 288 [146.49617430534323, 169.82847923193694, 184.6655999156808, 191.2780454145456, 201.80926875112024, 212.94914095338493, 281.7224794153975, 296.47300964801144, 304.86997758027275, 321.3980683853448, 376.37135488628553]
Incorrect: 135 [148.37733049255473, 176.5299605460266, 184.8962008452711, 196.80761234300823, 209.5135141794152, 260.28690176260136, 289.67550558618746, 296.6799336490552, 302.8526996155657, 315.1721271451561, 361.33159919728894]

For 36 bit collections:
Correct: 4792 [101.28449396394596, 163.07775676109281, 208.84432915187918, 247.64934851163574, 280.29917793264684, 308.758560611863, 333.5104973110168, 359.2102326260751, 385.341524306203, 416.2130770288503, 514.3106115942318]
Incorrect: 2276 [101.01451647040248, 165.57038943384262, 208.48620640924267, 243.88439465035594, 275.7811121854755, 303.12562995078474, 329.953917882523, 355.83441210137164, 379.530552644905, 408.6538293374167, 483.22351400955273]

For 49 bit collections:
Correct: 4768 [114.05508697818478, 174.2563303205412, 196.8939608474248, 212.31395378239696, 227.21713256543578, 241.09145106975404, 256.5237144588278, 274.79612728053644, 299.02948220335935, 334.9501158074909, 449.9437334815095]
Incorrect: 1865 [114.64629542058245, 173.7157741642832, 194.93518670388124, 210.83739737470484, 224.78439571773487, 239.59589677417227, 255.05243117007407, 269.87449306666116, 290.87928471381446, 322.2652800555552, 421.8335237274336]

For 64 bit collections:
Correct: 35476 [110.0025416740803, 157.657530043084, 221.19881695064333, 317.618125120713, 407.4567566504541, 492.930230892356, 579.3240917775855, 665.4780033145553, 754.307477847032, 860.654506992076, 1192.241674421196]
Incorrect: 9757 [110.0305428662102, 141.2437032747278, 178.2622664885565, 231.20667687923125, 324.2299599101351, 402.99914764859335, 476.52065031367806, 565.4624609300896, 662.8805152788625, 778.9547273310964, 1121.5537347220043]

For 100 bit collections:
Correct: 97894 [350.0032670770039, 513.011871278857, 705.2446562507365, 939.584224396955, 1192.4235094835396, 1345.4638652679464, 1379.462248297129, 1381.5510688207216, 1381.5511538822861, 1381.5511557963775, 1381.5511557963775]
Incorrect: 4349 [350.09963839594724, 389.982210098521, 431.13168647845856, 486.98410149702727, 554.2341493336598, 649.6402761814188, 769.9292511049458, 943.176370000018, 1144.645271421657, 1334.9169650805861, 1381.5511557963775]

Total Error: 0.11375
				 */
				datasets = Arrays.asList(
							new DataSet(new SampleSpecs(5, 5, 5, 5, delta))
							,new DataSet(new SampleSpecs(6, 6, 6, 6, delta))
							,new DataSet(new SampleSpecs(7, 7, 7, 7, delta))
							,new DataSet(new SampleSpecs(8, 8, 8, 8, delta))
							,new DataSet(new SampleSpecs(10, 10, 10, 10, delta))
						);
				break;
			}
			case 4:
			{
/*
For 25 bit collections:
Correct: 1031 [77.54209944951, 172.7998836637014, 194.48484007916295, 210.72964768643692, 226.52534596173214, 239.99317295043969, 254.19458900851942, 266.6714630957553, 284.4156561344354, 322.4416417366381, 450.25027032579857]
Incorrect: 549 [100.63659097086877, 163.43839592176224, 190.28204774749764, 209.56172898002808, 226.92982087989685, 239.30128620736534, 252.0276025082858, 266.5547619695288, 285.15179848138473, 319.6338525383954, 426.8374509032293]

For 36 bit collections:
Correct: 2457 [96.09205003778607, 116.22349355518485, 137.81603036576342, 161.81267241840283, 185.32435210583185, 205.76782247672136, 226.70518451381784, 247.8913989054434, 273.0816446793092, 303.3616961553007, 398.1857271051665]
Incorrect: 1140 [96.40459175804982, 118.44026661831828, 144.91167299453144, 166.84390200256797, 188.48558830243027, 204.62414375163752, 223.3607224756287, 243.64032285975077, 267.0768425502884, 295.724785715748]

For 49 bit collections:
Correct: 7958 [89.08489861994154, 118.6720629910529, 158.71929958480135, 203.5299036866076, 243.3649528034206, 277.29219736743937, 308.5698151952448, 338.2225649380647, 367.9792043882494, 407.6052976689281, 533.636347782882]
Incorrect: 3316 [89.01455888065297, 114.2692578485059, 152.35100283580238, 199.2629868174741, 232.20441885518525, 268.88518691865426, 301.29764272281136, 330.60451272771206, 360.3265848156194, 397.0948383718044, 525.2413262314415]

For 64 bit collections:
Correct: 14393 [143.08262572982488, 205.16301053246107, 238.43460694440165, 273.99991429087527, 310.41345927333117, 347.19076504708954, 383.7719897196788, 424.26313480806436, 470.8806943545427, 551.0903256403377, 960.5531813939408]
Incorrect: 4807 [143.31961943919853, 204.9344959074026, 232.3665801883737, 260.3171268690472, 290.44364978715123, 322.95206610501407, 355.61446274649546, 392.12611883200793, 434.6071133701246, 490.6939031058806, 875.3952751205866]

For 100 bit collections:
Correct: 105918 [185.00519766583915, 333.8566741432763, 501.2610799714054, 710.886302614411, 977.0179488185377, 1240.9598210053593, 1374.1069042957777, 1381.5510914657427, 1381.5512439673369, 1381.551255796228, 1381.551255796228]
Incorrect: 8831 [185.00923809436816, 226.31919748437926, 271.3875466861218, 318.17124448073986, 373.76734280123173, 438.7139407372813, 524.0857358292204, 647.7736664870113, 852.9517467436541, 1188.506307054336, 1381.551255796228]

Total Error: 0.1239561170212766
 */
				datasets = Arrays.asList(
						new DataSet(new SampleSpecs(5, 5, 5, 5, delta))
						,new DataSet(new SampleSpecs(6, 6, 6, 6, delta))
						,new DataSet(new SampleSpecs(7, 7, 7, 7, delta))
						,new DataSet(new SampleSpecs(8, 8, 8, 8, delta))
						,new DataSet(new SampleSpecs(10, 10, 10, 10, delta))
						);
				break;
			}
			case 5:
			{
/*
Finished 25
For 25 bit collections:
Correct: 3271 [146.76233200457202, 283.1366396785237, 330.0097584777667, 362.9647390038225, 392.19119947867614, 416.7969717580486, 441.3940098357285, 466.82810003233215, 559.3220713205454, 641.6867815978927, 847.4447461693708]
Incorrect: 1628 [139.50643416419925, 282.0329398087025, 335.5808625803551, 367.7430709939412, 394.50718301952026, 420.11764349331725, 446.8316091905541, 474.0729598628586, 571.7121383773012, 645.138459900639, 784.4821354302312]

For 36 bit collections:
Correct: 2929 [214.03615611931644, 233.28436393751437, 261.10894527507776, 309.7414354744276, 365.86737200049487, 401.23740432188174, 427.8162941339637, 452.28514510765007, 478.0999214617555, 506.8034220982232, 621.2989089865034]
Incorrect: 1315 [214.07139345542038, 233.52181881791063, 260.9214598566403, 309.87234655090725, 361.469213588465, 400.0820725258576, 426.3823733962808, 448.8998964765402, 474.29909901556084, 505.89703417927774, 626.077401274089]

For 49 bit collections:
Correct: 11504 [154.0184376570491, 262.1205435866482, 317.5391983486959, 371.7668850516467, 419.85246456833954, 467.6689688140798, 515.2495968076165, 561.8721369432528, 606.5805652551999, 657.7086894993819, 823.7705486717675]
Incorrect: 4707 [154.17141655284487, 266.29642598817145, 318.847180160678, 369.7524774079881, 419.92194035515786, 464.18925242368834, 508.5949994545521, 556.8506442207175, 602.8851717679297, 649.1186565343927, 788.016908745109]

For 64 bit collections:
Correct: 8519 [251.0692696466595, 343.333041538911, 391.3060487634881, 419.5680237969442, 442.68582634321444, 466.6700095260664, 488.96381062871944, 514.1875023917949, 548.7434091986115, 607.7515640863403, 856.4046885770712]
Incorrect: 2770 [251.07599999406287, 366.3128913251486, 400.5966508083891, 424.62308728024914, 445.619069203352, 463.98582037730523, 484.1119737923824, 503.22986842673737, 528.2958954654958, 573.2853295977369]

For 100 bit collections:
Correct: 117523 [208.0064896715592, 379.6663632295673, 566.6143994220078, 774.632992871841, 1010.8321370399993, 1253.6933525843776, 1368.8384495660468, 1381.5511399852512, 1381.5514172315827, 1381.551455795628, 1381.551455795628]
Incorrect: 10634 [208.02734592837507, 253.79379847228958, 303.443313035735, 358.094535385997, 423.4498752361455, 498.9744394822199, 599.0337912699656, 726.5580786206365, 905.0869576968435, 1201.5948244483282, 1381.551455795628]

Total Error: 0.12775485436893205
 */
				datasets = Arrays.asList(
						new DataSet(new SampleSpecs(5, 5, 5, 5, delta))
						,new DataSet(new SampleSpecs(6, 6, 6, 6, delta))
						,new DataSet(new SampleSpecs(7, 7, 7, 7, delta))
						,new DataSet(new SampleSpecs(8, 8, 8, 8, delta))
						,new DataSet(new SampleSpecs(10, 10, 10, 10, delta))
					);
				break;
			}
			default:
			{
				
			}
		}
		Collections.sort(datasets);
		for(DataSet dataset : datasets)
		{
			uncombinedLists.put(dataset.getSpecs().bitsPerSample(), new ArrayList<PredictionStats>());
		}
	}
	private void trainSet()
	{
		buildTrainSet("2000train.csv");
		addData();
		computeError();
	}
	//generates a set of results for a given delta
	private void testSet()
	{
		buildTestSet("test.csv");
		exportResults();
	}
	//Merges statistical results
	private void computeError()
	{
		for(Solution solution : solutionSet)
		{
			Map<Integer, PredictionStats> solutionStats = solution.getStats(trainingMap.get(solution).getStartBoard());
			for(Integer key : solutionStats.keySet())
			{
				uncombinedLists.get(key).add(solutionStats.get(key));
			}
		}
		List<PredictionStats> tierMerged = new ArrayList<>();
		for(Integer key : uncombinedLists.keySet())
		{
			PredictionStats tier = PredictionStats.merge(uncombinedLists.get(key), key);
			System.out.println(tier);
			tierMerged.add(tier);
		}
		System.out.println("Total Error: "+PredictionStats.merge(tierMerged, 0).error());
	}
	private void addData()
	{
		datasets = ListUtils.copy(datasets);
		while(!datasets.isEmpty())
		{
			System.gc();
			DataSet dataSet = datasets.remove(0); //so it gets garbage collected
			dataSet.load();
			Multitasker multitasker = new Multitasker(NUM_THREADS, 100000);
			//Divide up the threads evenly
			List<List<Solution>> dividedSolutions = ListUtils.divide(solutionSet, NUM_THREADS);
			for(int a = 0; a < NUM_THREADS; a ++)
			{
				multitasker.load(new DataThread(a, dividedSolutions.get(a), dataSet));
			}
			multitasker.done();
			System.out.println("Finished "+dataSet.getSpecs().bitsPerSample());
		}
	}
	//Offers a small speed up in computing predictions
	class DataThread extends Thread
	{
		List<Solution> solutions;
		int threadNum;
		DataSet dataSet;
		private DataThread(int threadNum, List<Solution> solutions, DataSet dataSet)
		{
			this.threadNum = threadNum;
			this.solutions = solutions;
			this.dataSet = dataSet;
		}
		@Override
		public void run()
		{
			for(int a = 0; a < solutions.size(); a ++)
			{
				if(a % (solutions.size() / 2) == 0)
				{
					System.out.println(threadNum + ": Completed "+a+" of "+solutions.size()+" sets");
				}
				solutions.get(a).addData(dataSet);
			}
		}
	}
	private void exportResults()
	{
		Exporter exporter = new Exporter("submission"+delta+".csv");
		Multitasker multitasker = new Multitasker(NUM_THREADS, 100000);
		List<List<Solution>> dividedSolutions = ListUtils.divide(solutionSet, NUM_THREADS);
		for(int a = 0; a < NUM_THREADS; a ++)
		{
			multitasker.load(new ExportThread(a, exporter, dividedSolutions.get(a)));
		}
		multitasker.done();
		exporter.export();
		System.out.println("Exported");
	}
	class ExportThread extends Thread
	{
		Exporter exporter;
		List<Solution> solutions;
		int threadNum;
		ExportThread(int threadNum, Exporter exporter, List<Solution> solutions)
		{
			this.threadNum = threadNum;
			this.exporter = exporter;
			this.solutions = solutions;
		}
		public void run()
		{
			for(int a = 0; a < solutions.size(); a ++)
			{
				if(a % (solutions.size() / 20) == 0)
				{
					System.out.println(threadNum + ": Completed "+a+" of "+solutions.size()+" sets");
				}
				Solution solution = solutions.get(a);
				synchronized(exporter)
				{
					exporter.add(solution.getId(), solution.getBoard(datasets));
				}
			}
		}
	}
	private void buildTrainSet(String filename)
	{
		List<TrainingSet> trainingSets = TrainingSet.load(filename, delta);
		for(TrainingSet trainingSet : trainingSets)
		{
			Solution solution = new Solution(trainingSet.getEndBoard(), trainingSet.getId());
			solutionSet.add(solution);
			trainingMap.put(solution, trainingSet);
		}
		System.out.println("Loaded "+filename);
	}
	public void buildTestSet(String filename)
	{
		List<TestingSet> testingSets = TestingSet.load(filename, delta);
		for(TestingSet testingSet : testingSets)
		{
			solutionSet.add(new Solution(testingSet.getEndBoard(), testingSet.getId()));
		}
		System.out.println("Loaded "+filename);
	}
}
